{"version":3,"sources":["components/NameComponent.js","App.js","reportWebVitals.js","index.js"],"names":["NameComponent","props","handleClickOpen","setState","open","handleClose","save","setName","state","name","setEnteredName","event","target","value","Dialog","this","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","margin","label","type","onChange","fullWidth","DialogActions","Button","onClick","color","Component","App","chatContainer","React","createRef","console","log","setIp","ip","sendMessage","clientRef","JSON","stringify","message","typedMessage","needtoscroll","scrollToMyRef","scroll","current","scrollHeight","clientHeight","scrollTo","displayMessages","ref","className","messages","map","msg","Date","time","toString","is_just_connected","variant","url","window","location","href","topics","onConnect","onDisconnect","onMessage","jobs","Array","isArray","push","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf7150b7.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nclass NameComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: true,\r\n            name: null\r\n        }\r\n    }\r\n\r\n    handleClickOpen = () => {\r\n        this.setState({open: true});\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({open: false});\r\n    };\r\n\r\n    save = () => {\r\n        this.setState({open: false});\r\n        this.props.setName(this.state.name);\r\n    };\r\n\r\n    setEnteredName = (event) => {\r\n        this.setState({name: event.target.value});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Dialog open={this.state.open} aria-labelledby=\"form-dialog-title\">\r\n                    <DialogTitle id=\"form-dialog-title\">SomeChat</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            Please enter your name\r\n                        </DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"Name\"\r\n                            type=\"name\" onChange={this.setEnteredName}\r\n                            fullWidth\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.save} color=\"primary\">\r\n                            Save\r\n                        </Button>\r\n                        <Button onClick={this.handleClose} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NameComponent;","import React, {Component} from 'react';\nimport SockJsClient from 'react-stomp';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport './css/MessageStyle.css';\nimport NameComponent from \"./components/NameComponent\";\nimport \"./styles.css\";\nimport Fetch from \"json-fetch\";\n\nclass App extends Component {\n    chatContainer = React.createRef();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            messages: [],\n            typedMessage: \"\",\n            name: \"\",\n            needtoscroll: false,\n            is_just_connected: true,\n        }\n    }\n\n    setName = (name) => {\n        console.log(name);\n        this.setState({name: name});\n    };\n\n    setIp = (ip) => {\n        console.log(ip);\n        this.setState({ip: ip});\n    };\n\n    sendMessage = () => {\n        this.clientRef.sendMessage('/app/user-all', JSON.stringify({\n            name: this.state.name,\n            message: this.state.typedMessage\n        }));\n        this.setState({needtoscroll: true})\n    };\n\n    scrollToMyRef = () => {\n        const scroll =\n          this.chatContainer.current.scrollHeight -\n          this.chatContainer.current.clientHeight;\n        this.chatContainer.current.scrollTo(0, scroll);\n      };\n\n    // componentWillMount() {\n    //     Fetch(\"http://localhost:8000/some-chat/app/history\", {\n    //         method: \"GET\"\n    //     }).then((response) => {\n    //         console.log(\"AAAAAAAAAAAAAAAAAAAAA\");\n    //         console.log(response.body);\n    //         // this.setState({ messages: response.body });\n    //     });\n    // }\n    \n\n    displayMessages = () => {\n        return (\n            <div ref={this.chatContainer} className=\"Chat\">\n                {this.state.messages.map(msg => {\n                    return (\n                        <div className=\"Mes\">\n                            {this.state.name == msg.name ?\n                                <div>\n                                    <p className=\"title1\">{msg.name}, {(new Date(msg.time)).toString()} : </p><br/>\n                                    <p>{msg.message}</p>\n                                </div> :\n                                <div>\n                                    <p className=\"title2\">{msg.name}, {(new Date(msg.time)).toString()} : </p><br/>\n                                    <p>{msg.message}</p>\n                                </div>\n                            }\n                        </div>\n                        )\n                    }\n                )\n                }\n            </div>\n        );\n    };\n\n\n    render() {\n        return (\n            <div>\n                <NameComponent setName={this.setName}/>\n                <div className=\"align-center\">\n                    <h1>Some-Chat</h1>\n                    <br/><br/>\n                </div>\n                <div className=\"align-center\">\n                </div>\n                <div className=\"align-center\">\n                    User : <p className=\"title1\"> {this.state.name} </p>\n                </div>\n                <div className=\"align-center\">\n                    {this.displayMessages()}\n                </div>\n                <div className=\"align-center\">\n                    <br/><br/>\n                    <table>\n                        <tr>\n                            <td>\n                                <TextField id=\"outlined-basic\" label=\"Enter Message to Send\" variant=\"outlined\"\n                                           onChange={(event) => {\n                                               this.setState({typedMessage: event.target.value});\n                                           }}/>\n                            </td>\n                            <td>\n                                <Button variant=\"contained\" color=\"primary\"\n                                        onClick={this.sendMessage}>Send</Button>\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n                <br/><br/>\n                \n                <SockJsClient url= {window.location.href+'some-chat'}\n                              topics={['/topic/user']}\n                              onConnect={() => {\n                                  this.clientRef.sendMessage('/app/history', JSON.stringify({}));\n                                  console.log(\"Connected\");\n                                  this.setState({is_just_connected: true})\n                              }}\n                              onDisconnect={() => {\n                                  console.log(\"Disconnected\");\n                              }}\n                              onMessage={(msg) => {\n\n                                  var jobs = this.state.messages;\n                                  console.log(typeof msg)\n                                  if (Array.isArray(msg))\n                                  {\n                                      if (!this.state.is_just_connected)\n                                      {\n                                          return;\n                                      }\n                                      console.log(\"in array logic\")\n                                      console.log(msg)\n                                      jobs = msg\n                                  }\n                                  else {\n                                      console.log(\"in object logic\")\n                                      console.log(msg)\n                                      jobs.push(msg);\n                                  }\n                                  this.setState({messages: jobs, is_just_connected: false});\n                                  console.log(this.state);                                  \n                                  if (this.state.needtoscroll) {\n                                      this.scrollToMyRef();\n                                      this.setState({needtoscroll: false})\n                                    }\n                              }}\n                              ref={(client) => {\n                                  this.clientRef = client\n                              }}/>\n            </div>\n        )\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}